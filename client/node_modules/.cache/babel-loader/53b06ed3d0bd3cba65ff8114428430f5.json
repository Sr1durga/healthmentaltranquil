{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (images.length > 0) {\n      media = await imageUpload(images);\n    }\n\n    const res = await postDataAPI('posts', {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // todo notification\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {//error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n    return;\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // todo notification\n\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const reportPost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"You have already reported this post.\"\n      }\n    });\n  }\n\n  const newPost = { ...post\n  };\n  newPost.reports.push(auth.user._id);\n  dispatch({\n    type: POST_TYPES.REPORT_POST,\n    payload: newPost\n  });\n\n  try {\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/sridu/Downloads/mern-social-media-master/mern-social-media-master/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","console","log","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\n\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\",\n};\n\nexport const createPost = ({content, images, auth, socket}) => async dispatch => {\n    let media = [];\n\n    try {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} });\n\n        if(images.length > 0){ media = await imageUpload(images)}\n\n        const res = await postDataAPI('posts', {content, images: media}, auth.token );\n\n        \n        dispatch({ type: POST_TYPES.CREATE_POST , payload: {...res.data.newPost, user: auth.user} });\n        \n        dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\n        \n\n        // todo notification\n        const msg = {\n          id: res.data.newPost._id,\n          text: \"Added a new post.\",\n          recipients: res.data.newPost.user.followers,\n          url: `/post/${res.data.newPost._id}`,\n          content, \n          image: media[0].url\n        };\n\n        dispatch(createNotify({msg, auth, socket}));\n\n    } catch (err) {\n        dispatch({\n            type: GLOBALTYPES.ALERT,\n            payload: {\n              error: err.response.data.msg\n\n            }\n        })\n    }\n}\n\n\nexport const getPosts = (token) => async dispatch => {\n    try {\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: true  });\n        const res = await getDataAPI('posts', token);\n        dispatch({ type: POST_TYPES.GET_POSTS, payload: {...res.data, page: 2} });\n\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\n    } catch (err) {\n      console.log(err)\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n           \n            //error: err.response.data.msg\n          }\n          \n        });\n    }\n}\n\n\nexport const updatePost = ({ content, images, auth, status }) => async (dispatch) => {\n  let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if(status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length){\n        return;\n    }\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n    const res = await patchDataAPI(\n      `post/${status._id}`,\n      { content, images: [...imgOldUrl, ...media] },\n      auth.token\n    );\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    console.log(err)\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const likePost = ({ post, auth, socket }) => async (dispatch) => {\n  const newPost = {...post, likes: [...post.likes, auth.user]};\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n  socket.emit(\"likePost\", newPost);\n  \n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url,\n    };\n\n    dispatch(createNotify({ msg, auth, socket }));\n  } catch (err) {\n    console.log(err)\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const unLikePost = ({ post, auth, socket }) => async (dispatch) => {\n  const newPost = { ...post, likes: post.likes.filter(like => like._id !== auth.user._id) };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  socket.emit(\"unLikePost\", newPost);\n\n  \n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`, \n    };\n\n    dispatch(removeNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const getPost = ({ detailPost, id, auth }) => async (dispatch) => {\n  if(detailPost.every(post => post._id !== id )){\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post})\n\n\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  }\n};\n\n\nexport const deletePost = ({ post, auth, socket }) => async (dispatch) => {\n  dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token);\n\n    // todo notification\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`,\n    };\n\n    dispatch(removeNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const reportPost = ({ post, auth }) => async (dispatch) => {\n\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"You have already reported this post.\" },\n    });\n  }\n    const newPost = { ...post };\n    newPost.reports.push(auth.user._id);\n\n  dispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\n  \n\ntry {\n  const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n  dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n} catch (err) {\n  dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: err.response.data.msg,\n    },\n  });\n}\n};\n\nexport const savePost = ({ post, auth }) => async (dispatch) => {\n  const newUser = {...auth.user, saved: [...auth.user.saved, post._id] };\n\n  dispatch({ type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}});\n\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\nexport const unSavePost = ({ post, auth }) => async (dispatch) => {\n  const newUser = { ...auth.user, saved: auth.user.saved.filter(id => id !== post._id) };\n\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}